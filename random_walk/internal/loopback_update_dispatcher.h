/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef THIRD_PARTY_RDMA_UNIT_TEST_RANDOM_WALK_INTERNAL_LOOPBACK_UPDATE_DISPATCHER_H_
#define THIRD_PARTY_RDMA_UNIT_TEST_RANDOM_WALK_INTERNAL_LOOPBACK_UPDATE_DISPATCHER_H_

#include <cstdint>
#include <memory>

#include "absl/container/flat_hash_map.h"
#include "random_walk/internal/client_update_service.pb.h"
#include "random_walk/internal/inbound_update_interface.h"
#include "random_walk/internal/update_dispatcher_interface.h"

namespace rdma_unit_test {
namespace random_walk {

// The class handles the dispatching of ClientUpdate generated by
// a RandomWalkClient when all RandomWalkClients are run on shared memory.
class LoopbackUpdateDispatcher : public UpdateDispatcherInterface {
 public:
  LoopbackUpdateDispatcher() = default;
  // Movable but not copyable..
  LoopbackUpdateDispatcher(LoopbackUpdateDispatcher&& handler) = default;
  LoopbackUpdateDispatcher& operator=(LoopbackUpdateDispatcher&& handler) =
      default;
  LoopbackUpdateDispatcher(const LoopbackUpdateDispatcher& handler) = delete;
  LoopbackUpdateDispatcher& operator=(const LoopbackUpdateDispatcher& handler) =
      delete;
  ~LoopbackUpdateDispatcher() = default;

  // Registers a remote RandomWalkClient to which we can send a ClientUpdate.
  void RegisterRemote(uint32_t client_id,
                      std::weak_ptr<InboundUpdateInterface> client);

  // Implements UpdateDispatcherInterface.
  void DispatchUpdate(const ClientUpdate& update) override;

 private:
  absl::flat_hash_map<uint32_t, std::weak_ptr<InboundUpdateInterface>> remotes_;
};

}  // namespace random_walk
}  // namespace rdma_unit_test

#endif  // THIRD_PARTY_RDMA_UNIT_TEST_RANDOM_WALK_INTERNAL_LOOPBACK_UPDATE_DISPATCHER_H_
